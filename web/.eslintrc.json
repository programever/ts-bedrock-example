{
  "parser": "@typescript-eslint/parser",
  "settings": {
    "react": { "version": "detect" },
    "import/resolver": {
      "typescript": {}
    }
  },
  "extends": [
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:react/recommended",
    "plugin:react/jsx-runtime",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "plugins": ["@typescript-eslint", "jam3", "prettier", "boundaries"],
  "ignorePatterns": ["node_modules/*"],
  "rules": {
    "@typescript-eslint/prefer-as-const": 0,
    "react/display-name": 0,
    "import/no-cycle": "error",
    "import/no-unresolved": ["error", { "ignore": [".svg", ".png", "gif"] }],
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/prefer-as-const": 0,
    "no-console": ["warn", { "allow": ["error", "info"] }],
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "react",
            "importNames": [
              "useState",
              "useEffect",
              "useContext",
              "useReducer",
              "useCallback",
              "useMemo",
              "useRef",
              "useImperativeHandle",
              "useLayoutEffect",
              "useDebugValue",
              "useDeferredValue",
              "useTransition",
              "useId",
              "useSyncExternalStore",
              "useInsertionEffect"
            ],
            "message": "Please do not use React hooks"
          }
        ]
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],
    "react/prop-types": [0],
    "react/no-danger": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "TSNonNullExpression",
        "message": "Non-null assertions (`!`) are not allowed. Please use optional chaining or proper type checks."
      },
      {
        "selector": "TSAsExpression",
        "message": "Type assertions (`as`) are not allowed. Use explicit type annotations instead."
      },
      {
        "selector": "TSTypePredicate",
        "message": "Type predicates (`is`) are not allowed. Use boolean return types instead."
      }
    ]
  }
}

